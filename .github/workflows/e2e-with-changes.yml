name: E2E Tests with Changes Detection

on:
  workflow_call:
    inputs:
      pr_sha:
        required: true
        type: string
        description: "SHA коммита для проверки изменений"
    outputs:
      test_scope:
        description: "Comma-separated list of changed services, empty if no matches found"
        value: ${{ jobs.detect-changes.outputs.test_scope }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      test_scope: ${{ steps.detect.outputs.test_scope }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes
        id: detect
        run: |
          echo "=== Step 1: Scanning repository ==="
          echo "Looking for all paths in frontend/apps/ and backend/apps/"
          ALL_PATHS=$(find . -type f \( -path "./frontend/apps/*" -o -path "./backend/apps/*" \) | sed 's|^./||')
          echo "Found paths:"
          echo "$ALL_PATHS"
          
          echo "=== Step 2: Extracting unique service paths ==="
          SERVICES=$(echo "$ALL_PATHS" | grep -E "^(frontend|backend)/apps/" | cut -d'/' -f3 | sort -u)
          echo "Detected services:"
          echo "$SERVICES"

          echo "=== Step 3: Getting changed files ==="
          echo "Using PR SHA: ${{ inputs.pr_sha }}"
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ inputs.pr_sha }})
          echo "All changed files:"
          echo "$CHANGED_FILES"
          
          echo "=== Step 4: Matching changes with services ==="
          MATCHES=""
          for service in $SERVICES; do
            if echo "$CHANGED_FILES" | grep -qE "^(frontend|backend)/apps/$service/"; then
              echo "Found changes in service: $service"
              MATCHES="$MATCHES $service"
            fi
          done

          echo "=== Step 5: Preparing result ==="
          RESULT=${MATCHES## }
          RESULT=${RESULT// /,}
          echo "Final test scope: ${RESULT:-empty (will run all tests)}"
          echo "test_scope=$RESULT" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache node_modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci && npx playwright install chromium

  all-tests:
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.test_scope == ''
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
    steps:
      - uses: actions/checkout@v4
      - name: Run all tests
        run: npx playwright test

  selective-tests:
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.test_scope != ''
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
    steps:
      - uses: actions/checkout@v4
      - name: Run service tests
        run: npx playwright test --grep "@${{ needs.detect-changes.outputs.test_scope }}" 